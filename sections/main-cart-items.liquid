<div class="cart-items-section">
  <div class="container">
    <div class="cart-header">
      <h1 class="cart-title">Your Cart</h1>
      <a href="/collections/all" class="continue-shopping">Continue Shopping</a>
    </div>
    
    <form action="/cart" method="post" id="cart-form" class="cart-form">
      {% if cart.item_count > 0 %}
        <div class="cart-table">
          <div class="cart-table-header">
            <div class="cart-header-product">Product</div>
            <div class="cart-header-price">Price</div>
            <div class="cart-header-quantity">Quantity</div>
            <div class="cart-header-total">Total</div>
          </div>
          
          <div class="cart-items">
            {% for item in cart.items %}
              <div class="cart-item" id="CartItem-{{ item.key }}">
                <div class="cart-item-product">
                  <div class="cart-item-image">
                    <a href="{{ item.url }}">
                      <img src="{{ item.image | img_url: '120x' }}" alt="{{ item.title | escape }}">
                    </a>
                  </div>
                  <div class="cart-item-details">
                    <a href="{{ item.url }}" class="cart-item-name">{{ item.product.title }}</a>
                    
                    {% if section.settings.show_vendor %}
                      <p class="cart-item-vendor">{{ item.vendor }}</p>
                    {% endif %}
                    
                    {% unless item.product.has_only_default_variant %}
                      <p class="cart-item-variant">{{ item.variant.title }}</p>
                    {% endunless %}
                    
                    <div class="cart-item-options">
                      {% for property in item.properties %}
                        {% unless property.first == '_' %}
                          <div class="cart-item-property">
                            <span class="property-name">{{ property.first }}:</span>
                            <span class="property-value">
                              {% if property.last contains '/uploads/' %}
                                <a href="{{ property.last }}">{{ property.last | split: '/' | last }}</a>
                              {% else %}
                                {{ property.last }}
                              {% endif %}
                            </span>
                          </div>
                        {% endunless %}
                      {% endfor %}
                    </div>
                    
                    <div class="cart-item-mobile-price">
                      <span class="price">{{ item.original_price | money }}</span>
                    </div>
                    
                    <div class="cart-item-mobile-quantity">
                      <div class="quantity-selector">
                        <button type="button" class="quantity-button minus" data-item-key="{{ item.key }}">-</button>
                        <input type="number" name="updates[{{ item.key }}]" value="{{ item.quantity }}" min="0" aria-label="Quantity" class="quantity-input" data-item-key="{{ item.key }}">
                        <button type="button" class="quantity-button plus" data-item-key="{{ item.key }}">+</button>
                      </div>
                    </div>
                    
                    <div class="cart-item-mobile-total">
                      <span class="price">{{ item.final_line_price | money }}</span>
                    </div>
                    
                    <div class="cart-item-mobile-actions">
                      <button type="button" class="quick-buy-button" data-product-id="{{ item.product_id }}" data-variant-id="{{ item.variant_id }}">
                        <i class="fas fa-bolt"></i> Quick Buy
                      </button>
                      <button type="button" class="remove-item" data-item-key="{{ item.key }}" aria-label="Remove {{ item.title }}">
                        <i class="fas fa-times"></i>
                      </button>
                    </div>
                  </div>
                </div>
                
                <div class="cart-item-price">
                  {% if item.original_price != item.final_price %}
                    <span class="price-item price-item--sale">{{ item.final_price | money }}</span>
                    <span class="price-item price-item--regular">{{ item.original_price | money }}</span>
                  {% else %}
                    <span class="price-item">{{ item.original_price | money }}</span>
                  {% endif %}
                  
                  {% if item.line_level_discount_allocations.size > 0 %}
                    <div class="cart-item-discounts">
                      {% for discount in item.line_level_discount_allocations %}
                        <span class="cart-item-discount">{{ discount.discount_application.title }}: {{ discount.amount | money }}</span>
                      {% endfor %}
                    </div>
                  {% endif %}
                </div>
                
                <div class="cart-item-quantity">
                  <div class="quantity-selector">
                    <button type="button" class="quantity-button minus" data-item-key="{{ item.key }}">-</button>
                    <input type="number" name="updates[{{ item.key }}]" value="{{ item.quantity }}" min="0" aria-label="Quantity" class="quantity-input" data-item-key="{{ item.key }}">
                    <button type="button" class="quantity-button plus" data-item-key="{{ item.key }}">+</button>
                  </div>
                </div>
                
                <div class="cart-item-total">
                  <span class="price">{{ item.final_line_price | money }}</span>
                </div>
                
                <div class="cart-item-actions">
                  <button type="button" class="quick-buy-button desktop" data-product-id="{{ item.product_id }}" data-variant-id="{{ item.variant_id }}">
                    <i class="fas fa-bolt"></i> Quick Buy
                  </button>
                  <button type="button" class="remove-item desktop" data-item-key="{{ item.key }}" aria-label="Remove {{ item.title }}">
                    <i class="fas fa-times"></i>
                  </button>
                </div>
              </div>
            {% endfor %}
          </div>
        </div>
        
        <div class="cart-note">
          <label for="CartNote">Order Special Instructions</label>
          <textarea name="note" id="CartNote" placeholder="Add a note to your order...">{{ cart.note }}</textarea>
        </div>
        
        <div class="cart-update">
          <button type="submit" name="update" class="update-cart">Update Cart</button>
        </div>
        
        <!-- Mobile Sticky Checkout Bar -->
        <div class="mobile-checkout-bar">
          <div class="mobile-checkout-total">
            <span class="mobile-total-label">Total:</span>
            <span class="mobile-total-value">{{ cart.total_price | money }}</span>
          </div>
          <button type="submit" name="checkout" class="mobile-checkout-button">
            <i class="fas fa-lock"></i> Checkout
          </button>
        </div>
      {% else %}
        <div class="empty-cart">
          <div class="empty-cart-icon">
            <i class="fas fa-shopping-cart"></i>
          </div>
          <h2>Your cart is empty</h2>
          <p>You haven't added any items to your cart yet.</p>
          <a href="/collections/all" class="btn primary-btn">Start Shopping</a>
        </div>
      {% endif %}
    </form>
  </div>
</div>

{% schema %}
{
  "name": "Cart Items",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_vendor",
      "default": false,
      "label": "Show product vendor"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Top padding",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Bottom padding",
      "default": 36
    }
  ]
}
{% endschema %}

<style>
  .cart-items-section {
    padding: var(--padding-top, 36px) 0 var(--padding-bottom, 36px);
  }
  
  .cart-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
  }
  
  .cart-title {
    font-size: 2rem;
    margin: 0;
  }
  
  .continue-shopping {
    color: var(--primary-pink);
    font-weight: 500;
    display: inline-flex;
    align-items: center;
  }
  
  .continue-shopping:hover {
    text-decoration: underline;
  }
  
  .cart-table {
    margin-bottom: 30px;
  }
  
  .cart-table-header {
    display: grid;
    grid-template-columns: 3fr 1fr 1fr 1fr auto;
    padding: 15px 0;
    border-bottom: 1px solid var(--medium-gray);
    font-weight: 500;
    display: none;
  }
  
  @media (min-width: 768px) {
    .cart-table-header {
      display: grid;
    }
  }
  
  .cart-item {
    display: grid;
    grid-template-columns: 3fr 1fr 1fr 1fr auto;
    gap: 15px;
    align-items: center;
    padding: 20px 0;
    border-bottom: 1px solid var(--medium-gray);
    transition: opacity 0.3s ease, height 0.3s ease;
  }
  
  .cart-item.removing {
    opacity: 0.5;
    pointer-events: none;
  }
  
  @media (max-width: 767px) {
    .cart-item {
      display: block;
      position: relative;
      padding-right: 30px;
    }
  }
  
  .cart-item-product {
    display: flex;
    align-items: center;
  }
  
  .cart-item-image {
    width: 80px;
    margin-right: 15px;
  }
  
  .cart-item-image img {
    width: 100%;
    height: auto;
    border-radius: var(--border-radius-sm);
  }
  
  .cart-item-name {
    font-weight: 500;
    margin-bottom: 5px;
    display: block;
  }
  
  .cart-item-vendor {
    font-size: 12px;
    color: var(--light-text);
    margin-bottom: 5px;
  }
  
  .cart-item-variant {
    font-size: 12px;
    color: var(--light-text);
    margin-bottom: 5px;
  }
  
  .cart-item-property {
    font-size: 12px;
    margin-bottom: 3px;
  }
  
  .property-name {
    font-weight: 500;
  }
  
  .cart-item-discounts {
    margin-top: 5px;
  }
  
  .cart-item-discount {
    display: block;
    font-size: 12px;
    color: var(--primary-pink);
  }
  
  .cart-item-mobile-price,
  .cart-item-mobile-quantity,
  .cart-item-mobile-total {
    display: none;
  }
  
  @media (max-width: 767px) {
    .cart-item-mobile-price,
    .cart-item-mobile-quantity,
    .cart-item-mobile-total {
      display: flex;
      margin-top: 10px;
      padding-left: 95px;
    }
    
    .cart-item-price,
    .cart-item-quantity,
    .cart-item-total,
    .remove-item.desktop {
      display: none;
    }
    
    .remove-item {
      position: absolute;
      top: 20px;
      right: 0;
    }
  }
  
  .quantity-selector {
    display: flex;
    align-items: center;
    max-width: 120px;
  }
  
  .quantity-button {
    width: 30px;
    height: 30px;
    background: var(--light-gray);
    border: none;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 16px;
  }
  
  .quantity-input {
    width: 40px;
    height: 30px;
    border: 1px solid var(--medium-gray);
    text-align: center;
    -moz-appearance: textfield;
  }
  
  .quantity-input::-webkit-outer-spin-button,
  .quantity-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  
  .price-item--sale {
    color: var(--primary-pink);
  }
  
  .price-item--regular {
    text-decoration: line-through;
    font-size: 0.9em;
    color: var(--light-text);
  }
  
  .remove-item {
    background: none;
    border: none;
    color: var(--light-text);
    cursor: pointer;
    padding: 5px;
    transition: all 0.3s ease;
  }
  
  .remove-item:hover {
    color: var(--primary-pink);
  }
  
  .cart-note {
    margin-bottom: 20px;
  }
  
  .cart-note label {
    display: block;
    margin-bottom: 10px;
    font-weight: 500;
  }
  
  .cart-note textarea {
    width: 100%;
    padding: 15px;
    border: 1px solid var(--medium-gray);
    border-radius: var(--border-radius-sm);
    min-height: 100px;
    resize: vertical;
  }
  
  .cart-update {
    text-align: right;
  }
  
  .update-cart {
    background: var(--light-purple);
    color: var(--primary-purple);
    border: none;
    padding: 10px 20px;
    border-radius: 30px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .update-cart:hover {
    background: var(--primary-purple);
    color: white;
  }
  
  .empty-cart {
    text-align: center;
    padding: 60px 0;
  }
  
  .empty-cart-icon {
    font-size: 60px;
    color: var(--light-text);
    margin-bottom: 20px;
  }
  
  .empty-cart h2 {
    margin-bottom: 15px;
  }
  
  .empty-cart p {
    margin-bottom: 30px;
    color: var(--light-text);
  }
  
  @media (max-width: 576px) {
    .cart-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 10px;
    }
  }
  
  /* Quick Buy Button Styles */
  .quick-buy-button {
    background-color: var(--primary-pink, #ff6b9a);
    color: white;
    border: none;
    border-radius: 4px;
    padding: 6px 12px;
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    margin-right: 10px;
  }
  
  .quick-buy-button i {
    margin-right: 5px;
  }
  
  .quick-buy-button:hover {
    background-color: #e1306c;
    transform: translateY(-2px);
  }
  
  .cart-item-actions {
    display: flex;
    align-items: center;
  }
  
  .cart-item-mobile-actions {
    display: none;
    margin-top: 10px;
    width: 100%;
    justify-content: space-between;
  }
  
  /* Mobile Sticky Checkout Bar */
  .mobile-checkout-bar {
    display: none;
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    background-color: white;
    padding: 15px;
    box-shadow: 0 -5px 15px rgba(0, 0, 0, 0.1);
    z-index: 100;
    justify-content: space-between;
    align-items: center;
  }
  
  .mobile-total-label {
    font-weight: 600;
    margin-right: 5px;
  }
  
  .mobile-total-value {
    font-size: 1.2rem;
    font-weight: 700;
    color: var(--primary-pink, #ff6b9a);
  }
  
  .mobile-checkout-button {
    background-color: var(--primary-pink, #ff6b9a);
    color: white;
    border: none;
    border-radius: 30px;
    padding: 12px 24px;
    font-weight: 600;
    font-size: 1rem;
    cursor: pointer;
    display: flex;
    align-items: center;
  }
  
  .mobile-checkout-button i {
    margin-right: 8px;
  }
  
  /* Enhanced Mobile Styles */
  @media (max-width: 767px) {
    .cart-table-header {
      display: none;
    }
    
    .cart-item {
      flex-direction: column;
      padding: 15px;
      margin-bottom: 15px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }
    
    .cart-item-product {
      flex-direction: row;
      width: 100%;
      margin-bottom: 15px;
    }
    
    .cart-item-image {
      width: 80px;
      height: 80px;
      margin-right: 15px;
    }
    
    .cart-item-details {
      flex: 1;
    }
    
    .cart-item-price, 
    .cart-item-quantity,
    .cart-item-total,
    .remove-item.desktop,
    .quick-buy-button.desktop {
      display: none;
    }
    
    .cart-item-mobile-price,
    .cart-item-mobile-quantity,
    .cart-item-mobile-total {
      display: flex;
      align-items: center;
      margin-bottom: 10px;
    }
    
    .cart-item-mobile-price:before {
      content: "Price: ";
      font-weight: 500;
      margin-right: 5px;
      min-width: 60px;
    }
    
    .cart-item-mobile-quantity:before {
      content: "Qty: ";
      font-weight: 500;
      margin-right: 5px;
      min-width: 60px;
    }
    
    .cart-item-mobile-total:before {
      content: "Total: ";
      font-weight: 500;
      margin-right: 5px;
      min-width: 60px;
    }
    
    .cart-item-mobile-actions {
      display: flex;
      margin-top: 15px;
    }
    
    .mobile-checkout-bar {
      display: flex;
    }
    
    body {
      padding-bottom: 70px;
    }
    
    .cart-update {
      margin-bottom: 30px;
    }
    
    .quantity-selector {
      height: 35px;
    }
    
    .quantity-input {
      width: 40px;
      height: 35px;
      font-size: 14px;
    }
    
    .quantity-button {
      width: 35px;
      height: 35px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const cartForm = document.getElementById('cart-form');
    if (!cartForm) return;
    
    // Quantity selectors
    const quantityButtons = document.querySelectorAll('.quantity-button');
    quantityButtons.forEach(button => {
      button.addEventListener('click', function() {
        const itemKey = this.dataset.itemKey;
        const input = document.querySelector(`.quantity-input[data-item-key="${itemKey}"]`);
        
        if (this.classList.contains('minus')) {
          if (parseInt(input.value) > 0) {
            input.value = parseInt(input.value) - 1;
          }
        } else if (this.classList.contains('plus')) {
          input.value = parseInt(input.value) + 1;
        }
        
        // Auto-update cart when quantity changes
        const updateButton = document.querySelector('.update-cart');
        if (updateButton) {
          updateButton.click();
        }
      });
    });
    
    // Remove item buttons
    const removeButtons = document.querySelectorAll('.remove-item');
    removeButtons.forEach(button => {
      button.addEventListener('click', function() {
        const itemKey = this.dataset.itemKey;
        const cartItem = document.getElementById(`CartItem-${itemKey}`);
        
        // Show loading state
        if (cartItem) {
          cartItem.classList.add('removing');
        }
        
        // Use Fetch API to directly remove the item
        fetch('/cart/change.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({
            id: itemKey,
            quantity: 0
          })
        })
        .then(response => response.json())
        .then(cart => {
          // Update cart count in header
          const cartCountElement = document.querySelector('.cart-count');
          if (cartCountElement) {
            cartCountElement.textContent = cart.item_count;
          }
          
          // Remove the item from DOM
          if (cartItem) {
            cartItem.style.height = '0';
            cartItem.style.opacity = '0';
            
            setTimeout(() => {
              cartItem.remove();
              
              // If cart is empty, refresh the page to show empty cart message
              if (cart.item_count === 0) {
                window.location.reload();
              } else {
                // Update cart totals
                updateCartTotals(cart);
              }
            }, 300);
          }
        })
        .catch(error => {
          console.error('Error removing item from cart:', error);
          // Remove loading state
          if (cartItem) {
            cartItem.classList.remove('removing');
          }
          alert('There was an error removing this item. Please try again.');
        });
      });
    });
    
    // Quick Buy buttons
    const quickBuyButtons = document.querySelectorAll('.quick-buy-button');
    quickBuyButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        const productId = this.getAttribute('data-product-id');
        const variantId = this.getAttribute('data-variant-id');
        
        // Show loading state
        this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
        this.disabled = true;
        
        // Create a form and submit it to the checkout with just this item
        const form = document.createElement('form');
        form.method = 'post';
        form.action = '/checkout';
        
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'items[0][id]';
        input.value = variantId;
        
        const quantityInput = document.createElement('input');
        quantityInput.type = 'hidden';
        quantityInput.name = 'items[0][quantity]';
        quantityInput.value = '1';
        
        form.appendChild(input);
        form.appendChild(quantityInput);
        document.body.appendChild(form);
        form.submit();
      });
    });
    
    // Function to update cart totals without refreshing
    function updateCartTotals(cart) {
      // Update subtotal
      const subtotalElement = document.querySelector('.cart-subtotal-amount');
      if (subtotalElement) {
        subtotalElement.textContent = formatMoney(cart.items_subtotal_price);
      }
      
      // Update total
      const totalElement = document.querySelector('.cart-total-amount');
      if (totalElement) {
        totalElement.textContent = formatMoney(cart.total_price);
      }
    }
    
    // Format money according to shop currency format
    function formatMoney(cents) {
      const format = {{ shop.money_format | json }};
      if (typeof cents === 'string') {
        cents = cents.replace('.', '');
      }
      
      let value = '';
      const placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
      
      function formatWithDelimiters(number, precision, thousands, decimal) {
        precision = precision || 2;
        thousands = thousands || ',';
        decimal = decimal || '.';
        
        if (isNaN(number) || number == null) {
          return 0;
        }
        
        number = (number / 100.0).toFixed(precision);
        
        const parts = number.split('.');
        const dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands);
        const cents = parts[1] ? (decimal + parts[1]) : '';
        
        return dollars + cents;
      }
      
      switch(format.match(placeholderRegex)[1]) {
        case 'amount':
          value = formatWithDelimiters(cents, 2);
          break;
        case 'amount_no_decimals':
          value = formatWithDelimiters(cents, 0);
          break;
        case 'amount_with_comma_separator':
          value = formatWithDelimiters(cents, 2, '.', ',');
          break;
        case 'amount_no_decimals_with_comma_separator':
          value = formatWithDelimiters(cents, 0, '.', ',');
          break;
      }
      
      return format.replace(placeholderRegex, value);
    }
  });
</script>
